plugins {
    id('gg.essential.loom')
    id('gg.essential.defaults')
    // Load the shadow plugin.
    // We don't need to apply it since we don't want the default shadowJar task.
    id('com.gradleup.shadow') version '8.3.5' apply false
}

version = '1.0.0'
java.toolchain.languageVersion.set(JavaLanguageVersion.of(8))

var essentialAdPackage = 'com.example.mod.essentialad'

tasks.jar {
    manifest.attributes(
        // The main entry point of the Essential Ad mod is its core mod:
        'FMLCorePlugin': "${essentialAdPackage}.asm.EssentialAdCoreMod",
        // If your mod already has its own core mod, you can have the Essential Ad core mod chain-load it:
        'EssentialAdCoreModDelegate': 'com.example.mod.asm.ExampleModCoreMod',
        // In any case case, you'll likely also want to instruct Forge to load your regular mod, otherwise it'll only
        // load the core mod:
        'FMLCorePluginContainsFMLMod': 'Yes',
    )
}

var essentialAdDep = 'gg.essential:ad-1.8.9-forge:1.0.0'

tasks.register('relocatedEssentialAdJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    destinationDirectory.set(layout.buildDirectory.dir('devlibs'))
    archiveFileName.set('essentialad.jar')
    inputs.property('essentialAdPackage', essentialAdPackage)
    var configuration = project.configurations.detachedConfiguration(project.dependencies.create(essentialAdDep))
    dependsOn(configuration)
    from({ configuration.collect { zipTree(it) } })
    exclude('mcmod.info', 'META-INF/mods.toml', 'gg/essential/ad/EssentialAdMod.class')
    relocate('gg.essential.ad', essentialAdPackage)
    filesMatching('gg/essential/ad/mixins.json') {
        filter { it.replace('gg.essential.ad', essentialAdPackage) }
    }
}

tasks.jar {
    from(relocatedEssentialAdJar.archiveFile.map { zipTree(it) })
}
