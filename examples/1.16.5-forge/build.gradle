plugins {
    id('gg.essential.loom')
    id('gg.essential.defaults')
    // Load the shadow plugin.
    // We don't need to apply it since we don't want the default shadowJar task.
    id('com.gradleup.shadow') version '8.3.5' apply false
}

version = '1.0.0'
java.toolchain.languageVersion.set(JavaLanguageVersion.of(8))

var essentialPartnerModPackage = 'com.example.mod.essentialpartnermod'

tasks.jar {
    manifest.attributes(
        // The main entry point of the Essential Partner mod are its mixins.
        // Note that you may have to re-declare your own mixin configs here too depending on your build system.
        'MixinConfigs': "${essentialPartnerModPackage.replace('.', '/')}/mixins.json,mixins.examplemod.json",
    )
}

var essentialPartnerModDep = 'gg.essential:partner-mod-integration-1.16.5-forge:1.0.0'

tasks.register('relocatedEssentialPartnerModJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    destinationDirectory.set(layout.buildDirectory.dir('devlibs'))
    archiveFileName.set('essentialpartner.jar')
    inputs.property('essentialPartnerModPackage', essentialPartnerModPackage)
    var configuration = project.configurations.detachedConfiguration(project.dependencies.create(essentialPartnerModDep))
    dependsOn(configuration)
    from({ configuration.collect { zipTree(it) } })
    exclude('mcmod.info', 'META-INF/mods.toml', 'gg/essential/partnermod/EssentialPartnerMod.class')
    relocate('gg.essential.partnermod', essentialPartnerModPackage)
    filesMatching('gg/essential/partnermod/mixins.json') {
        filter { it.replace('gg.essential.partnermod', essentialPartnerModPackage) }
    }
}

tasks.jar {
    from(relocatedEssentialPartnerModJar.archiveFile.map { zipTree(it) })
}
